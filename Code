 grv = 0.2;
hsp = 0;
vsp = 0;
hspWalk = 11;
vspJump = -10;
canJump = 0;
canDash = false;
dashDistance = 396;
dashTime = 12;

stateFree = function()
{
    //Work out where to move horizontally

hsp = (keyRight - keyLeft) * hspWalk;

//Work out where to move vertically

vsp = vsp + grv;

//jump input
if (canJump-- > 0) && (keyJump)
{
    vsp = vspJump;
    canJump = 0;
}

//dash input
if (canDash) && (keyDash)
{
    canDash = false;
    canJump = 0;
    dashDirection = point_direction(0,0,keyRight-keyLeft,keyDown-keyUp);
    dashSp = dashDistance/dashTime;
    dashEnergy = dashDistance;
    state = StateDash;
}

//horizontal collision
if (place_meeting(x + hsp, y, obj_ground))
{
    while (abs(hsp) > 0.1)
    {
        hsp *= 0.5;
        if (!place_meeting(x + hsp, y, obj_ground)) x += hsp;
    }
    hsp = 0;
}
x += hsp;

//vertical collision
if (place_meeting(x, y + vsp, obj_ground))
{
    if (vsp > 0)
    {
        canJump = 80;
        canDash = true;
    }
    while (abs(vsp) > 0.1)
    {
        vsp *= 0.5;
        if (!place_meeting(x, y + vsp, obj_ground)) y += vsp;
    }
    vsp = 0;
}
y += vsp;
}

StateDash = function()
{
    //Move via the dash
    hsp = lengthdir_x(dashSp,dashDirection);
    vsp = lengthdir_y(dashSp,dashDirection);
    
    //Trail Effect
    with (instance_create_depth(x,y,depth+1,oTrail))
    {
        sprite_index = other.sprite_index;
        image_blend = c_fuchsia;
        image_alpha = 0.9;
    }
    //horizontal collision
if (place_meeting(x + hsp, y, obj_ground))
{
    while (abs(hsp) > 0.1)
    {
        hsp *= 0.5;
        if (!place_meeting(x + hsp, y, obj_ground)) x += hsp;
    }
    hsp = 0;
}
x += hsp;

//vertical collision
if (place_meeting(x, y + vsp, obj_ground))
{
    while (abs(vsp) > 0.1)
    {
        vsp *= 0.5;
        if (!place_meeting(x, y + vsp, obj_ground)) y += vsp;
    }
    vsp = 0;
    

}
y += vsp;

//Ending the dash
dashEnergy -= dashSp;
if (dashEnergy <= 0)
{
    vsp = 0;
    hsp = 0;
    state = stateFree;
}

}

state = stateFree;  
